clear 
close all
clc
addpath([fileparts(pwd), '/global_fun']);

% This population uses broad assumptions regarding the population for those without HIV
    % 1. 
    % 2.
% The distribution of PLWH population is based on outputs from an optimization problem

% Criteria:
    % age: 15-99 (NHAS starts from 13)
    % race: 0-B, 1-H, 2-W, 3-O
    % status: 0, 1, 2, 3
    % prep: 1 only possible if status is 0, 1, 2
    % aware: 1 only possible if status is 1, 2, 3, 4 and prep is 0
    % treatment: 1 only possible if aware is 1
    % alive: all are alive

%% %%%%%%%%%%%%%%%%%%%%%%%%%% initial set-up %%%%%%%%%%%%%%%%%%%%%%%%%%
% number of people
numPeople = 58204; %changed

% pair of consecutive is buckets
age_buckets = [15, 19, 20, 29, ...
			   30, 39, 40, 49, ...
			   50, 59, 60, 69, ...
               70, 79, 80, 99];

% age proportions for infected and unaware
age_buckets_prop = [0.04, 0.2, ...
					0.23, 0.18, ...
					0.15, 0.11, ...
					0.06, 0.03];

% distribution of general age
% this distribution is used for not infected (suspectible) and unawared groups
x = [0 10 25 35 45 55 65 75 89.5 100]; %median of each age bucket
y = [0 age_buckets_prop 0]; %corresponding age prop
xq = 15:99; 
age_buckets_prop_new = interp1(x, y, xq); %new age prop by each age
% plot(age_buckets,repelem(age_buckets_prop,2), 'o-')
% hold on;
% plot(xq, age_buckets_prop_new)


% status proportions
% we assume that the breakdown for diagnosis is the same for those already diagnosed
% P(status|undiag) are based on data found online
infected_status_prop_undiagnosed = [0.413, 0.503, 0.084];

% P(status|diag) are based on wendy 
infected_status_prop_diagnosed = [0.32, 0.359, 0.321];

% status index for infected
status_val = [1, 2, 3];

% uninfected vs infected proportions
PI = 0.23; % proportion of PLWH 
uninfected_infected = [1-PI, PI];

% unaware vs aware proportions
PUDI = 0.07; % P(undiag|PLWH)
unaware_aware = [PUDI, 1-PUDI];
unaware_aware_values = [0, 1];

% prep proportions (on Off)
prep_prop = [0.007, 1-0.007];
prep_values = [1, 0];

% race proportions: Black, Hispanic, White, Other
race_prop_MSM_noHIV = [.056, .226, .571, 0.147]; % P(race|Sus)
race_prop_PLWH = [.09, .19, .63, 0.09]; % P(race|PLWH)
race_values = [0, 1, 2, 3];

% imported diagnosed breakdown
% order of this strat is 
    % A1, R1, T1 
    % A1, R2, T1 
    % A1, R3, T1 
    % A1, R4, T1
    % ...
load('DiagnosedPop_2012_crossSectional_SF_V2.mat') %generated by generate_joint.m
diagnosedStratProp = diagnosedPopulation / sum(diagnosedPopulation);

% status must be applied on top of this
strat_race = [0, 1, 2, 3];
strat_treat = [1, 0];

% change: use NHAS instead of census
% this age dirtribution is used for awared group
strat_age1 = [15, 19]; 
strat_age2 = [20, 29];
strat_age3 = [30, 39];
strat_age4 = [40, 49];
strat_age5 = [50, 59]; 
strat_age6 = [60, 69];
strat_age7 = [70, 79];
strat_age8 = [80, 99];

% cell array for strat_age
strat_age_prop = num2cell([0.000533 0.041521 0.12959 0.336584 0.326984 0.139342 0.023084 0.002362]);
strat_age = {strat_age1, strat_age2, strat_age3, strat_age4,...
    strat_age5, strat_age6, strat_age7, strat_age8};

x = [0 17 25 35 45 55 65 75 89.5 100];
y = [0 cell2mat(strat_age_prop) 0];
xq = 15:99;
strat_age_prop_new = interp1(x, y, xq);
% figure
% plot(age_buckets, repelem(cell2mat(strat_age_prop),2), 'o-')
% hold on;
% plot(xq, strat_age_prop_new)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% generate zero matrix for each attribute. These values will be chagned based on proportions later
age = zeros(numPeople, 1);
prep = zeros(numPeople, 1);
aware = zeros(numPeople, 1);
treatment = zeros(numPeople, 1);
% we are assigning race to one of our specified codes
race = zeros(numPeople, 1);

% generate ones matrix for alive. all starting popualtion is alive
alive = ones(numPeople, 1);

% generate zeros matrix for years with aids
aidsYears = zeros(numPeople, 1);

% 0 - no infection (susceptible) and 1 - infected
popSusceptible = round(uninfected_infected(1)*numPeople);
popInfected = round(uninfected_infected(2)*numPeople);

% Assign status
status = [zeros(popSusceptible,1); ones(popInfected,1)];

% check to make sure length corresponds with numPeople
status = checkLength(status, numPeople, [0,1]);


%% %%%%%%%%%%%%%%%%%%%%%%% not infected (suspectible)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% they are broken down into prep and off prep
% then further subset based on general age brackets

% get index associated with being susceptible
susceptibleIndex = find(status == 0);
susceptibleLength = length(susceptibleIndex);

% define on and off prep for those susceptible
onPrep_susceptible = round(prep_prop(1)*susceptibleLength);
offPrep_susceptible = round(prep_prop(2)*susceptibleLength);
tempVector =[ones(onPrep_susceptible,1); zeros(offPrep_susceptible,1)];

% check to make sure length corresponds with proper num
tempVector = checkLength(tempVector, susceptibleLength, [0,1]);

% Modify prep vector with temp vector to match susceptible index
prep(susceptibleIndex) = tempVector;

% define races for on/off prep and susceptible
for i = 1:length(prep_values)
    
	prepIndex = find(prep==prep_values(i));
    
	% intersection of prep index with susceptible will create the subset needed 
	% to apply the methodolgy above for assigning race
	desiredIndex = intersect(susceptibleIndex, prepIndex);
	desiredLength = length(desiredIndex);

	% define race for susceptible in same way that it was done for on and off prep
	race0 = round(race_prop_MSM_noHIV(1)*length(desiredIndex));
	race1 = round(race_prop_MSM_noHIV(2)*length(desiredIndex));
	race2 = round(race_prop_MSM_noHIV(3)*length(desiredIndex));
    race3 = round(race_prop_MSM_noHIV(4)*length(desiredIndex));
	tempVector = [zeros(race0,1); ones(race1,1); ones(race2,1)+1; ones(race3,1)+2];
    
	% check to make sure length corresponds with proper num
	tempVector = checkLength(tempVector, desiredLength, race_values);
    
	% Modify prep vector with temp vector to match susceptible index
	race(desiredIndex) = tempVector;
end


% define ages for the on/off prep and susceptible 
% for both prep on and prep off based on race, 
% the same general age distribution is applied 
for i = 1:length(prep_values)

	prepIndex = find(prep == prep_values(i));
	desiredIndex1 = intersect(prepIndex, susceptibleIndex);

	for j = 1:length(race_values)

		raceIndex = find(race == race_values(j));
		desiredIndex2 = intersect(raceIndex, desiredIndex1);
		desiredLength = length(desiredIndex2);
        
        tempAge = [];
        for k = 1:length(age_buckets_prop)
            age_min = age_buckets(2*k-1);
			age_max = age_buckets(2*k);
            age_tmp = age_min: age_max;
            popSize = round(age_buckets_prop(k)*desiredLength);
            if popSize==0
                continue;
            end
            temp = gendist(age_buckets_prop_new((age_min-14):(age_max-14)), 1, popSize);
            tempAge = [tempAge; age_tmp(temp)'];
        end
        
		% check to make sure length corresponds with proper num
		tempVector = checkLength(tempAge, desiredLength, age_buckets);

		age(desiredIndex2) = tempVector;
	end
end


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%% infected %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%first, aware vs unaware %%%%%%%%%%%%%%%%%%%

% get index associated with being infected
infectedIndex = find(status == 1);
infectedLength = length(infectedIndex);

% we first only want to work with the unaware ones (not diagnosed)
% calculate the number of unwared and awared infected people
unaware_infected = round(unaware_aware(1)*infectedLength);
aware_infected = infectedLength - unaware_infected;
tempVector = [zeros(unaware_infected,1); ones(aware_infected,1)];

% we do not need to check the length of this temp vector because our aware infected
	% is the infectedLength - unaware_infected
% Modify aware vector at the index where infected with the temp Vector with temp vector to match infected index
aware(infectedIndex) = tempVector;


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%% P(race|unaware)%%%%%%%%%%%%%%%%%%%%%%%%%%
% we assume race is independent of prep
unawareIndex = find(aware == 0);
desiredIndex = intersect(infectedIndex, unawareIndex);
desiredLength = length(desiredIndex);

% define race values
race0 = round(race_prop_PLWH(1)*length(desiredIndex));
race1 = round(race_prop_PLWH(2)*length(desiredIndex));
race2 = round(race_prop_PLWH(3)*length(desiredIndex));
race3 = round(race_prop_PLWH(4)*length(desiredIndex));
tempVector =[zeros(race0,1); ones(race1,1); ones(race2,1)+1; ones(race3,1)+2];

% check to make sure length corresponds with proper num
tempVector = checkLength(tempVector, desiredLength, race_values);
% Modify prep vector with temp vector to match susceptible index
race(desiredIndex) = tempVector;


%% %%%%%%%%%%%%%%%%%% P(on/off prep | unaware by race) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% note that off prep is the default, thus it will automaticaly be assigned to those indicated as aware
% because of this, we do not need to specifically label aware for those on prep

unawareIndex = find(aware == 0);
infectedUnawareIndex = intersect(infectedIndex, unawareIndex);
for i = 1:length(race_values)
	raceIndex = find(race == race_values(i));
	desiredIndex = intersect(infectedUnawareIndex, raceIndex);
	desiredLength = length(desiredIndex);

	onPrep_infected_race = round(prep_prop(1)*desiredLength);
	offPrep_infected_race = round(prep_prop(2)*desiredLength);
	tempVector =[ones(onPrep_infected_race,1); zeros(offPrep_infected_race,1)];
	
    % check to make sure length corresponds with proper num
	tempVector = checkLength(tempVector, desiredLength, [0,1]);
	prep(desiredIndex) = tempVector;
end



%% %%%%%%%%%%%%%%%%%% P(age/status |infected, unaware, on/off prep, race)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% the same general age distribution is applied for all stratifications
infectedIndex = find(status == 1);
unawareIndex = find(aware == 0);
desiredIndex1 = intersect(infectedIndex, unawareIndex);
for i = 1:length(prep_values)
	prepIndex = find(prep == prep_values(i));
	desiredIndex2 = intersect(desiredIndex1, prepIndex);

	for j = 1:length(race_values)
		raceIndex = find(race == race_values(j));
		desiredIndex3 = intersect(desiredIndex2, raceIndex);%infected, unawared, prep=0/1, race=0/1/2/3 
		desiredLength = length(desiredIndex3);
        
		% create temp varaible to store status and age
		tempStatus = [];
		tempAge = [];
        
		% iterate through the three stages
		for k = 1: length(status_val)
			statusVal = status_val(k);
            tempAge_2 = [];
            % only uses the first 6 age groups (15-69)
            normFactor = sum(age_buckets_prop(1:6));
            
            for m = 1: length(age_buckets_prop(1:6))
				age_min = age_buckets(2*m-1);
				age_max = age_buckets(2*m);
                age_tmp = age_min:age_max;
                
				% population size for this group
				popSize = round(age_buckets_prop(m)/normFactor*infected_status_prop_undiagnosed(k)*desiredLength);
                if popSize==0
                    continue;
                end
                temp = gendist(age_buckets_prop_new((age_min-14):(age_max-14)), 1, popSize);
                tempAge_2 = [tempAge_2; age_tmp(temp)'];
			end
         
            tempAge = [tempAge; tempAge_2];
			tempStatus =  [tempStatus; zeros(length(tempAge_2),1)+statusVal];
        end
              
		% check vectors for age and status
		tempAge = checkLength(tempAge, desiredLength, age_buckets);
		tempStatus = checkLength(tempStatus, desiredLength, status_val);
				

		age(desiredIndex3) = tempAge;
		status(desiredIndex3) = tempStatus;
	end
end


%% %%%%%%%%%%%%%%%%%%%%%%%%% P(on/off treatment, race, age, status|aware) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for those that are aware, we will define which are on treatment and which are not, race, and age
% these proportions are SPECIFIC to the stratificationt that came from the optimization problem

% note that those that are aware (diagnosed) are by default infected
desiredIndex = find(aware == unaware_aware_values(2));

% temp vectors 
tempRace = [];
tempAge = [];
tempTreat = [];
tempStatus = [];

% counter for desired strat
desiredStrat = 1;
% iterate through in the order of treatment, age, and race
for i = 1:length(strat_treat)
	for k = 1:length(strat_age)
		for j = 1:length(strat_race)
			subPopSize = round(length(desiredIndex)*diagnosedStratProp(desiredStrat));
            
			% this sub-population is assigned with the treatment, race, here
			tempTreat = [tempTreat; zeros(subPopSize, 1) + strat_treat(i)];
			tempRace = [tempRace; zeros(subPopSize, 1) + strat_race(j)];

			% define our new age buckets and proporitions 
			age_prop_diag = strat_age_prop{k};
            age_buckets_diag = strat_age{k};
            
			% iterate through the three stages
			for m = 1: length(status_val)
				statusVal = status_val(m);    
               
                % iterate through age buckets
				tempAge_2 = [];
				for n = 1: length(age_prop_diag)
					age_min = age_buckets_diag(2*n-1)
					age_max = age_buckets_diag(2*n);
                    age_tmp = age_min:age_max;
                    
					% population size for this group
					subSubPopSize = round(subPopSize*infected_status_prop_diagnosed(m));
                    
                    if subSubPopSize==0
                       continue;
                    end
                    temp = gendist(strat_age_prop_new((age_min-14):(age_max-14)), 1, subSubPopSize);
                    tempAge_2 = [tempAge_2; age_tmp(temp)'];
				end
				tempAge = [tempAge; tempAge_2];
				tempStatus =  [tempStatus; zeros(length(tempAge_2),1)+statusVal];
                
            end
            
            % increment up our desiredStrat counter by 1 
			desiredStrat = desiredStrat + 1;	
		end
	end
end

% check length on all the temps to make sure appropriate
tempAge = checkLength(tempAge, length(desiredIndex), age_buckets);
tempStatus = checkLength(tempStatus, length(desiredIndex), status_val);
tempRace = checkLength(tempRace, length(desiredIndex), strat_race);
tempTreat = checkLength(tempTreat, length(desiredIndex), strat_treat);

% modify the vectors for race, treatment, age, and status
race(desiredIndex) = tempRace;
treatment(desiredIndex) = tempTreat;
age(desiredIndex) = tempAge;
status(desiredIndex) = tempStatus;

% popMatrix = [age, race, status, prep, aware, treatment, aidsYears, alive];
popMatrix = [age, race, status, prep, aware, treatment, aidsYears, alive];

% Header = {'age', 'race', 'status', 'prep', 'aware', 'treatment', 'aidsYears', 'alive'};
Header = {'age', 'race', 'status', 'prep', 'aware', 'treatment', 'aidsYears', 'alive'};

output_path = fileparts(pwd) + "/input";
cd(output_path);
csvwrite_with_headers('init_pop_SF_V5.csv', popMatrix, Header)

%% %%%%%%%%%%%%%%%%%%%%%%% supporting function %%%%%%%%%%%%%%%%%%

function outputVect = checkLength(inputVector, desiredLength, supValArray)
	outputVect = inputVector;
	if length(inputVector) ~= desiredLength
		% if too many, remove last one
		if length(inputVector) > desiredLength
			outputVect = inputVector(1:desiredLength,1);
		% if too few, add one
		else
			outputVect = [inputVector; (randsample(supValArray, desiredLength - length(inputVector), true))'];
		end
	end
end

function T = gendist(P,N,M,varargin)
    %check for input errors
    if and(nargin~=3,nargin~=4)
        error('Error:  Invalid number of input arguments.')
    end
    if min(P)<0
        error('Error:  All elements of first argument, P, must be positive.')
    end
    if or(N<1,M<1)
        error('Error:  Output matrix dimensions must be greater than or equal to one.')
    end
    %normalize P
    Pnorm=[0 P]/sum(P);
    %create cumlative distribution
    Pcum=cumsum(Pnorm);
    %create random matrix
    N=round(N);
    M=round(M);
    R=rand(1,N*M);
    %calculate T output matrix
    V=1:length(P);
    [~,inds] = histc(R,Pcum); 
    T = V(inds);
    %shape into output matrix
    T=reshape(T,N,M);
    %if desired, output plot
    if nargin==4
        if strcmp(varargin{1},'plot')
            Pfreq=N*M*P/sum(P);
            figure;
            hold on
            histogram(T(T>0),1:length(P))
            plot(Pfreq,'r-o')
            ylabel('Frequency')
            xlabel('P-vector Index')
            axis tight
            box on
        end
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
